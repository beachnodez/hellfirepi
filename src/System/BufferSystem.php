<?php

namespace Coff\Hellfire\System;

use Casadatos\Component\Dashboard\ConsoleDashboard;
use Casadatos\Component\Dashboard\Gauge\PercentGauge;
use Casadatos\Component\Dashboard\Gauge\ValueGauge;
use Coff\Hellfire\Event\BufferEvent;
use Coff\Hellfire\Event\CyclicEvent;
use Coff\Hellfire\ComponentArray\BufferSensorArray;
use Coff\Hellfire\StateEnum\BufferStateEnum;

class BufferSystem extends System
{
    use SensorArrayTrait;
    use DashboardTrait;

    public function init() {

        $this
            ->allowTransition(BufferStateEnum::EMPTY(), BufferStateEnum::NOTEMPTY())
            ->allowTransition(BufferStateEnum::NOTEMPTY(), BufferStateEnum::FULL())
            ->allowTransition(BufferStateEnum::FULL(), BufferStateEnum::NOTEMPTY())
            ->allowTransition(BufferStateEnum::NOTEMPTY(), BufferStateEnum::EMPTY());

        $this->getDashboard()
            ->add('Fill', new PercentGauge(4))
            ->add('KWh', new ValueGauge(3))
            ->add('BuffHi', new ValueGauge(6), null, ConsoleDashboard::COL_FG_LIGHTRED)
            ->add('BuffLo', new ValueGauge(6), null, ConsoleDashboard::COL_FG_LIGHTBLUE)
            ;
        return parent::init();
    }

    public function assertEmptyToNotempty()
    {
        $fill = $this->getSensorArray()->getPowerFillPercent();
        return $fill > 3 ? true : false;
    }

    public function assertNotemptyToFull()
    {
        $fill = $this->getSensorArray()->getPowerFillPercent();
        return $fill > 95 ? true : false;
    }

    public function assertFullToNotEmpty()
    {
        $fill = $this->getSensorArray()->getPowerFillPercent();
        return $fill < 91 ? true : false;
    }

    public function assertNotEmptyToEmpty()
    {
        $fill = $this->getSensorArray()->getPowerFillPercent();
        return $fill < 2 ? true : false;
    }


    public static function getSubscribedEvents()
    {
        $events = parent::getSubscribedEvents(); // TODO: Change the autogenerated stub

        $events[CyclicEvent::EVERY_3_SECOND] = 'every3rdSecond';
        $events[CyclicEvent::EVERY_2_MINUTE] = 'every2ndMinute';

        return $events;
    }

    public function update() {
        /** @var BufferSensorArray $sensorArray */
        $sensorArray = $this->getSensorArray();

        $sensorArray->update();

        $this->run();
    }

    public function every3rdSecond(CyclicEvent $event) {
        /** @var BufferSensorArray $sensorArray */
        $sensorArray = $this->getSensorArray();

        $this->getDashboard()
            ->update('Fill', sprintf("%d", $sensorArray->getPowerFillPercent()))
            ->update('KWh', sprintf("%d", $sensorArray->getPowerFill()))
            ->update('BuffHi', sprintf("%.1f", $sensorArray->getReading(BufferSensorArray::SENSOR_HIGH)))
            ->update('BuffLo', sprintf("%.1f", $sensorArray->getReading(BufferSensorArray::SENSOR_LOW)))
        ;

    }

    public function every2ndMinute(CyclicEvent $event) {
        $this->update();
    }
}
