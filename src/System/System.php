<?php

namespace Coff\Hellfire\System;

use Coff\DataSource\DataSourceInterface;
use Coff\Hellfire\CommonTrait\ContainerTrait;
use Coff\Hellfire\CommonTrait\EventDispatcherTrait;
use Coff\SMF\Machine;
use Coff\SMF\Transition\Transition;
use Psr\Log\LoggerAwareTrait;
use Symfony\Component\EventDispatcher\EventSubscriberInterface;

abstract class System extends Machine implements DataSourceInterface, EventSubscriberInterface
{
    use EventDispatcherTrait;
    use ContainerTrait;
    use LoggerAwareTrait;

    protected $state;

    /**
     * @return $this
     * @throws \ReflectionException
     */
    public function init() {
        $this->logger->info('System ' . (new \ReflectionClass($this))->getShortName() . ' initialized');

        return $this;
    }

    /**
     * @param Transition $transition
     * @return \Coff\SMF\MachineInterface|void
     * @throws \ReflectionException
     */
    public function onTransition(Transition $transition)
    {
        $this->logger->info('System ' . (new \ReflectionClass($this))->getShortName() . ' state changes from ' . $transition->getFromState() . ' to ' . $transition->getToState());

        $this->getEventDispatcher()->dispatch((new \ReflectionClass($this))->getShortName() . '.' . 'transition' . ucfirst($transition->getFromState()) . 'To' . ucfirst($transition->getToState()));

        parent::onTransition($transition); // TODO: Change the autogenerated stub
    }

    /**
     * Implements DatasourceInterface
     * @return $this|DataSourceInterface
     */
    public function update() {

        return $this;
    }

    /**
     * @return string
     */
    public function getValue()
    {
        return (string) $this->getMachineState();
    }

    /**
     * Implements DatasourceInterface
     * @return int
     */
    public function getStamp()
    {
        return time();
    }

    /**
     * Returns an array of event names this subscriber wants to listen to.
     *
     * The array keys are event names and the value can be:
     *
     *  * The method name to call (priority defaults to 0)
     *  * An array composed of the method name to call and the priority
     *  * An array of arrays composed of the method names to call and respective
     *    priorities, or 0 if unset
     *
     * For instance:
     *
     *  * array('eventName' => 'methodName')
     *  * array('eventName' => array('methodName', $priority))
     *  * array('eventName' => array(array('methodName1', $priority), array('methodName2')))
     *
     * @return array The event names to listen to
     */
    public static function getSubscribedEvents()
    {
        return [];
    }
}
