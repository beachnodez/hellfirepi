<?php

namespace Coff\Hellfire;

use Coff\Hellfire\Exception\HellfireException;
use Psr\Log\LoggerAwareTrait;
use Symfony\Component\EventDispatcher\Event;

class EventDispatcher extends \Symfony\Component\EventDispatcher\EventDispatcher
{
    use LoggerAwareTrait;

    public function dispatch($eventName, Event $event = null)
    {
        if (!$event instanceof \Coff\Hellfire\Event\Event) {
            throw new HellfireException('Event object missing for event ' . $eventName);
        }

        $event->onDispatch($eventName);

        $this->logger->debug('Dispatching event ' . $eventName);
        return parent::dispatch($eventName, $event); // TODO: Change the autogenerated stub
    }

    protected function doDispatch($listeners, $eventName, Event $event)
    {
        foreach ($listeners as $listener) {
            if ($event->isPropagationStopped()) {
                break;
            }

            $this->logger->debug('Listener call ' . get_class($listener[0]) .  '::' . serialize($listener[1]) . '()');
            call_user_func($listener, $event, $eventName, $this);
        }
    }
}
