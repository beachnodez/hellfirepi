<?php

namespace Coff\Hellfire\Server;

use Coff\Hellfire\ComponentArray\Adapter\DatabaseStorageAdapter;
use Coff\Hellfire\ComponentArray\DataSourceArray;
use Coff\Hellfire\Event\CyclicEvent;
use Coff\Hellfire\System\AirIntakeSystem;
use Coff\Hellfire\System\BoilerSystem;
use Coff\Hellfire\System\BufferSystem;
use Coff\Hellfire\System\HeaterSystem;
use Coff\OneWire\Client\AsyncW1Client;

class HellfireServer extends Server
{
    /**
     * @var AsyncW1Client
     */
    protected $w1Client;

    /**
     * PDO storage for keeping sensors' readings and control devices' states
     * @var
     */
    protected $storage;

    /**
     * @var \PDO
     */
    protected $pdo;

    public function init()
    {
        parent::init(); // TODO: Change the autogenerated stub

        $this->addShortCycleCallback('1s', [$this, 'everySecond']);
        $this->addShortCycleCallback('10s', [$this, 'every10s']);
        $this->addShortCycleCallback('30s', [$this, 'every30s']);
        $this->addShortCycleCallback('1m', [$this, 'every1m']);
    }

    public function each()
    {

        /** @todo Server<->Client communication here? */
    }

    public function everySecond() {

        $this->getEventDispatcher()->dispatch(CyclicEvent::EVERY_SECOND, new CyclicEvent());
    }

    public function every10s() {

        $this->getEventDispatcher()->dispatch(CyclicEvent::EVERY_10_SECOND, new CyclicEvent());
    }

    public function every30s() {
        $this->getEventDispatcher()->dispatch(CyclicEvent::EVERY_30_SECOND, new CyclicEvent());
    }

    public function every1m() {

        $this->getEventDispatcher()->dispatch(CyclicEvent::EVERY_MINUTE, new CyclicEvent());

        /**
         * Store sensors readings
         */
        /** @var DatabaseStorageAdapter $storageAdapter */
        $storageAdapter = $this->container['data-sources-storage'];
        $storageAdapter->store();
        $this->logger->debug('Stored sensor readings.');
    }

    public function everyNight()
    {
        /**
         * Clean old readings
         */
        /** @var DatabaseStorageAdapter $storageAdapter */
        $storageAdapter = $this->container['data-sources-storage'];
        $storageAdapter->clean();
    }
}
