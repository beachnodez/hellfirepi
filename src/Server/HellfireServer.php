<?php

namespace Coff\Hellfire\Server;

use Coff\Hellfire\ComponentArray\Adapter\DatabaseStorageAdapter;
use Coff\Hellfire\ComponentArray\DataSourceArray;
use Coff\Hellfire\System\BoilerSystem;
use Coff\Hellfire\System\BufferSystem;
use Coff\Hellfire\System\HeaterSystem;
use Coff\OneWire\Client\AsyncW1Client;
use Pimple\Container;

class HellfireServer extends Server
{
    /**
     * @var AsyncW1Client
     */
    protected $w1Client;

    /**
     * PDO storage for keeping sensors' readings and control devices' states
     * @var
     */
    protected $storage;

    /**
     * @var \PDO
     */
    protected $pdo;

    public function init()
    {
        parent::init(); // TODO: Change the autogenerated stub

        $this->addShortCycleCallback('1s', [$this, 'everySecond']);
        $this->addShortCycleCallback('10s', [$this, 'every10s']);
        $this->addShortCycleCallback('1m', [$this, 'every1m']);
    }

    public function each()
    {
        /** @var Container $container */
        $container = $this->getContainer();

        /** @todo Server<->Client communication here? */
    }

    public function everySecond() {
        /**
         * Since boiler has exhaust temp. sensor it has to be processed
         * with higher freq.
         *
         * @var BoilerSystem $boiler
         */
        $boiler = $this->container['system:boiler'];
        $boiler->process();
    }

    public function every10s() {
        /** Update DataSources attached to AsyncW1Client */
        /** @var AsyncW1Client $w1Client */
        $w1Client = $this->container['client:one-wire'];
        $w1Client->update();

        /** Then updates Sensors from DataSources */
        /** @var DataSourceArray $oneWireSensors */
        $oneWireSensors = $this->container['data-sources:one-wire'];
        foreach ($oneWireSensors as $sensor) {
            $sensor->update();
        }
    }

    public function every1m() {

        /**
         * Every minute should be enough for a buffer and heater system
         * @var BufferSystem $buffer
         */
        $buffer = $this->container['system:buffer'];
        $buffer->process();

        /** @var HeaterSystem $heater */
        $heater = $this->container['system:heater'];
        $heater->process();


        /**
         * Store sensors readings
         */
        /** @var DatabaseStorageAdapter $storageAdapter */
        $storageAdapter = $this->container['data-sources-storage'];
        $storageAdapter->store();
        $this->logger->debug('Stored sensor readings.');
    }

}
